apply plugin: 'com.android.library'
//apply plugin: 'maven-publish'
apply from: 'upload_local_maven.gradle'
//apply plugin: 'maven'

android {
    compileSdkVersion cfgs.compileSdkVersion
    buildToolsVersion cfgs.buildToolsVersion

    defaultConfig {
        minSdkVersion cfgs.minSdkVersion
        targetSdkVersion cfgs.targetSdkVersion
        versionCode 24
        versionName "2.2.4-non-native"

        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError false
    }

    resourcePrefix 'ucrop_'

}

dependencies {
    implementation "androidx.appcompat:appcompat:${cfgs.androidx_appcompat_version}"
    implementation "androidx.exifinterface:exifinterface:${cfgs.androidx_exifinterface_version}"
    implementation "androidx.transition:transition:${cfgs.androidx_transition_version}"
    implementation "androidx.recyclerview:recyclerview:${cfgs.version_recyclerview}"
}



/*task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

publishing {
    publications {
        aarSDk(MavenPublication) {
            //记住一下规则,等会导入时注意, 举例compile 'com.dz.bleota:bleota:1.0.0'
            groupId groupIdValue//包名
            artifactId artifactIdName
            version versionCode//版本
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            //同时记录该依赖库所依赖的其他远程依赖
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    repositories {
        maven{

            url NEXUS_REPOSITORY_URL
            credentials {
                username MAVEN_USERNAME
                password MAVEN_PASSWORD
            }
            *//*if (!Boolean.parseBoolean(useLocal) && project.hasProperty('MAVEN_USERNAME') && project.hasProperty('MAVEN_PASSWORD')) {
                url NEXUS_REPOSITORY_URL
                credentials {
                    username MAVEN_USERNAME
                    password MAVEN_PASSWORD
                }
            } else {
                url("file://"+project.rootDir.absolutePath+"/repository")
            }*//*
        }
    }

}

task publishToMaven(dependsOn: ['assemble', 'publish']) {
    doLast {
        if (!Boolean.parseBoolean(useLocal)) {
            println "finish publish  to  maven"
        } else {
            println "finish publish  to  maven directory:--> $rootDir/repo"

        }
    }
}

publishToMaven.setGroup('SDKPush')*/




